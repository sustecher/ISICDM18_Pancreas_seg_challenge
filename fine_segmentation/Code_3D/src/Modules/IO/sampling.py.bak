#from __future__ import print_function
#from __future__ import absolute_import
from loadData import load_imagesSinglePatient
from loadData import loadSingleTransformedTemplateImage
from loadData import getRandIndexes
import numpy as np
import math
import random
import pycuda.driver as cuda
import pycuda.autoinit  # noqa
from pycuda.compiler import SourceModule


# **********************************  For Training *********************************
""" This function gets all the samples needed for training a sub-epoch """
def getSamplesSubepoch(numSamples,
                       imageNames,                                                                
                       groundTruthNames,
                       templateSubjects,
                       gtTemplateLabelsImages,
                       roiNames,
                       imageType,
                       sampleSizes,
                       receptiveField,
                       applyPadding,
                       searchRadius,
                       similarK
                       ):
    print (" ... Get samples for subEpoch...")
    
    numSubjects_Epoch = len(imageNames)
    randIdx = getRandIndexes(numSubjects_Epoch, numSubjects_Epoch)

    samplesPerSubject = numSamples/len(randIdx)
    print (" ... getting {} samples per subject...".format(samplesPerSubject)) 
    
    imagesSamplesAll = [] 
    gt_samplesAll = [] 
    imagesSimilarSamplesAll = []
    gt_similarsamplesAll = []
    numSubjectsSubEpoch = len(randIdx) 
    
    samplingDistribution = getSamplesDistribution(numSamples, numSubjectsSubEpoch)
    
    for i_d in xrange(0, numSubjectsSubEpoch) :
        # For displaying purposes
        perc = 100 * float(i_d+1)/numSubjectsSubEpoch
        print("...Processing subject: {}. {} % of the whole training set...".format(str(i_d + 1),perc))

        # -- Load images for a given patient --
        [imgSubject, 
         gtLabelsImage,
         roiMask,
         paddingValues] = load_imagesSinglePatient(randIdx[i_d],
                                                   imageNames,
                                                   groundTruthNames,
                                                   roiNames, 
                                                   applyPadding,
                                                   receptiveField,
                                                   sampleSizes,
                                                   imageType
                                                   )
                                                  

        # -- Get samples for that patient
        [imagesSamplesSinglePatient,
         gtSamplesSinglePatient,
         imageSimilarSamplesSinglePatient,
         gtSimilarSamplesSinglePatient] = getSamplesSubject(i_d,
                                                     imgSubject,
                                                     gtLabelsImage,
                                                     templateSubjects,
                                                     gtTemplateLabelsImages,
                                                     imageType,
                                                     applyPadding,
                                                     roiMask,
                                                     samplingDistribution,
                                                     sampleSizes,
                                                     receptiveField,
                                                     searchRadius,
                                                     similarK
                                                     )

        imagesSamplesAll = imagesSamplesAll + imagesSamplesSinglePatient
        gt_samplesAll = gt_samplesAll + gtSamplesSinglePatient
        imagesSimilarSamplesAll = imagesSimilarSamplesAll + imageSimilarSamplesSinglePatient 
        gt_similarsamplesAll = gt_similarsamplesAll + gtSimilarSamplesSinglePatient

    # -- Permute the training samples so that in each batch both background and objects of interest are taken
    TrainingData = zip(imagesSamplesAll, gt_samplesAll, imagesSimilarSamplesAll, gt_similarsamplesAll)
    random.shuffle(TrainingData)
    rnd_imagesSamples = []
    rnd_gtSamples = []
    rnd_imagesSimilarSamples = []
    rnd_gtSimilarSamples = []
    rnd_imagesSamples[:], rnd_gtSamples[:], rnd_imagesSimilarSamples[:], rnd_gtSimilarSamples[:] = zip(*TrainingData)

    del imagesSamplesAll[:]
    del gt_samplesAll[:]
    del imagesSimilarSamplesAll[:]
    del gt_similarsamplesAll[:]

    return rnd_imagesSamples, rnd_gtSamples, rnd_imagesSimilarSamples, rnd_gtSimilarSamples



def getSamplesSubject(imageIdx,
                      imgSubject,
                      gtLabelsImage,
                      templateSubjects,
                      gtTemplateLabelsImages,
                      imageType,
                      applyPaddingBool,
                      roiMask,
                      samplingDistribution,
                      sampleSizes,
                      receptiveField,
                      searchRadius,
                      similarK
                      ):
    sampleSizes = sampleSizes
    imageSamplesSingleImage = []
    gt_samplesSingleImage = []
    similarSamplesSingleImage = []
    gt_similarSamplesSingleImage = []
    imgDim = imgSubject.shape

    # Get weight maps for sampling
    weightMaps = getSamplingWeights(gtLabelsImage, roiMask)


    # We are extracting segments for foreground and background
    for c_i in xrange(2) :
        numOfSamplesToGet = samplingDistribution[c_i][imageIdx]
        weightMap = weightMaps[c_i]
        # Define variables to be used
        roiToApply = np.zeros(weightMap.shape, dtype="int32")
        halfSampleDim = np.zeros( (len(sampleSizes), 2) , dtype='int32')


        # Get the size of half patch (i.e sample)
        for i in xrange( len(sampleSizes) ) :
            if sampleSizes[i]%2 == 0: #even
                dimensionDividedByTwo = sampleSizes[i]/2
                halfSampleDim[i] = [dimensionDividedByTwo - 1, dimensionDividedByTwo] 
            else: #odd
                dimensionDividedByTwoFloor = math.floor(sampleSizes[i]/2) 
                halfSampleDim[i] = [dimensionDividedByTwoFloor, dimensionDividedByTwoFloor] 

        coord = np.array(np.where(gtLabelsImage>0))
        xmin = max(min(coord[0,:])-(sampleSizes[0]-1)/9,0)
        xmax = min(max(coord[0,:])+(sampleSizes[0]-1)/9,imgDim[0])
        ymin = max(min(coord[1,:])-(sampleSizes[1]-1)/9,0)
        ymax = min(max(coord[1,:])+(sampleSizes[1]-1)/9,imgDim[1])
        zmin = max(min(coord[2,:])-(sampleSizes[2]-1)/9,0)
        zmax = min(max(coord[2,:])+(sampleSizes[2]-1)/9,imgDim[2])

        xmin = halfSampleDim[0][0]
        xmax = imgDim[0] - halfSampleDim[0][1]
        ymin = halfSampleDim[1][0]
        ymax = imgDim[1] - halfSampleDim[1][1]
        zmin = halfSampleDim[2][0]
        zmax = imgDim[2] - halfSampleDim[2][1]

        coverMask = np.zeros(weightMap.shape, dtype="int32")
        coverMask[xmin:xmax, ymin:ymax, zmin:zmax] = 1

        """
        # --- Set to 1 those voxels in which we are interested in
        # - Define the limits
        roiMinx = halfSampleDim[0][0]
        roiMaxx = imgDim[0] - halfSampleDim[0][1]
        roiMiny = halfSampleDim[1][0]
        roiMaxy = imgDim[1] - halfSampleDim[1][1]
        roiMinz = halfSampleDim[2][0]
        roiMaxz = imgDim[2] - halfSampleDim[2][1]

        # Set
        #roiToApply[roiMinx:roiMaxx,roiMiny:roiMaxy,roiMinz:roiMaxz] = 1
        """
        #maskCoords = weightMap * roiToApply
        maskCoords = weightMap * coverMask
        # We do the following because np.random.choice 4th parameter needs the probabilities to sum 1
        maskCoords = maskCoords / (1.0* np.sum(maskCoords))
        #print(maskCoords)
        maskCoordsFlattened = maskCoords.flatten()
  
        centralVoxelsIndexes = np.random.choice(maskCoords.size,
                                                size = numOfSamplesToGet,
                                                replace=True,
                                                p=maskCoordsFlattened)

        centralVoxelsCoord = np.asarray(np.unravel_index(centralVoxelsIndexes, maskCoords.shape))
        coordsToSampleArray = np.zeros(list(centralVoxelsCoord.shape) + [2], dtype="int32")
        coordsToSampleArray[:,:,0] = centralVoxelsCoord - halfSampleDim[ :, np.newaxis, 0 ] #np.newaxis broadcasts. To broadcast the -+.
        coordsToSampleArray[:,:,1] = centralVoxelsCoord + halfSampleDim[ :, np.newaxis, 1 ]

        
        # ----- Compute the coordinates that will be used to extract the samples ---- #
        numSamples = len(coordsToSampleArray[0])

        # Extract samples from computed coordinates
        for s_i in xrange(numSamples) :

            # Get one sample given a coordinate
            coordsToSample = coordsToSampleArray[:,s_i,:] 
            
            sampleSizes = sampleSizes
            imageSample = np.zeros((1, sampleSizes[0],sampleSizes[1],sampleSizes[2]), dtype = 'float32')
            gt_sample = np.zeros((1, sampleSizes[0],sampleSizes[1],sampleSizes[2]), dtype = 'float32')
            
            xMin = coordsToSample[0][0]
            xMax = coordsToSample[0][1] + 1
            yMin = coordsToSample[1][0]
            yMax = coordsToSample[1][1] + 1
            zMin = coordsToSample[2][0]
            zMax = coordsToSample[2][1] + 1
            #print(xMin,xMax,yMin,yMax,zMin,zMax)
            
            imageSample[:1] = imgSubject[xMin:xMax,yMin:yMax,zMin:zMax]
            gt_sample[:1] = gtLabelsImage[xMin:xMax,yMin:yMax,zMin:zMax]

            imageSamplesSingleImage.append(imageSample)
            gt_samplesSingleImage.append(gt_sample)

            
            x = np.arange(centralVoxelsCoord[:,s_i][0]-searchRadius,centralVoxelsCoord[:,s_i][0]+searchRadius+1,1)
            y = np.arange(centralVoxelsCoord[:,s_i][1]-searchRadius,centralVoxelsCoord[:,s_i][1]+searchRadius+1,1)
            z = np.arange(centralVoxelsCoord[:,s_i][2]-searchRadius,centralVoxelsCoord[:,s_i][2]+searchRadius+1,1)
            xcoord = np.tile(x, y.size*z.size)
            ycoord = np.tile(np.transpose(np.tile(y, (x.size,1))).flatten(),(z.size,1)).flatten()
            zcoord = np.transpose(np.tile(y, (x.size*y.size,1))).flatten()

            num_temp = len(templateSubjects)/len(samplingDistribution[1])       #determine the number of transformed template image for each subject
            tempIndexes = np.arange(imageIdx*num_temp, (imageIdx+1)*num_temp)  # determine the indexes for each subject

            [similarSample, 
             similarLabelSample]=getKSimlarPatchCPU(xcoord,
                                                    ycoord,
                                                    zcoord,
                                                    imageSample,
                                                    templateSubjects,
                                                    gtTemplateLabelsImages,
                                                    applyPaddingBool,
                                                    imageType,
                                                    tempIndexes,
                                                    sampleSizes,
                                                    receptiveField,
                                                    halfSampleDim,
                                                    similarK)

            similarSamplesSingleImage.append(similarSample)
            gt_similarSamplesSingleImage.append(similarLabelSample)

    return imageSamplesSingleImage,gt_samplesSingleImage, similarSamplesSingleImage, gt_similarSamplesSingleImage


def getKSimlarPatchCPU(xcoord,
                       ycoord,
                       zcoord,
                       imageSample,
                       templateSubjects,
                       gtTemplateLabelsImages,
                       applyPaddingBool,
                       imageType,
                       imageIndexs,
                       sampleSizes,
                       receptiveField,
                       halfSampleDim,
                       similarK) :

    SSD = np.zeros((len(imageIndexs), len(xcoord)), dtype = 'float32')   
    neighborCoord = np.concatenate((xcoord[np.newaxis,:],ycoord[np.newaxis,:],zcoord[np.newaxis,:]),0)  
    satisfcoord = []   
    distance = []     
    for t_i in xrange(len(imageIndexs)):
        [templateImage,
        templateLabelImage] = loadSingleTransformedTemplateImage(imageIndexs[t_i],
                                                                 templateSubjects,
                                                                 gtTemplateLabelsImages,
                                                                 sampleSizes,
                                                                 receptiveField,
                                                                 applyPaddingBool,
                                                                 imageType
                                                                ) 

        coordsToNeighborArray = np.zeros(list(neighborCoord.shape) + [2], dtype="int32")
        coordsToNeighborArray[:,:,0] = neighborCoord - halfSampleDim[ :, np.newaxis, 0 ] #np.newaxis broadcasts. To broadcast the -+.
        coordsToNeighborArray[:,:,1] = neighborCoord + halfSampleDim[ :, np.newaxis, 1 ]
        numSamples = len(coordsToNeighborArray[0])
        for s_i in xrange(numSamples) :

            # Get one sample given a coordinate
            coordsToSample = coordsToNeighborArray[:,s_i,:] 
            
            sampleSizes = sampleSizes
            neighborPatch = np.zeros((1, sampleSizes[0],sampleSizes[1],sampleSizes[2]), dtype = 'float32')

            xMin = coordsToSample[0][0]
            xMax = coordsToSample[0][1] + 1
            yMin = coordsToSample[1][0]
            yMax = coordsToSample[1][1] + 1
            zMin = coordsToSample[2][0]
            zMax = coordsToSample[2][1] + 1

            if xMin>=0 and yMin>=0 and zMin>=0 and xMax<templateImage.shape[0] and yMax<templateImage.shape[1] and zMax<templateImage.shape[2]:
                neighborPatch[:1] = templateImage[xMin:xMax,yMin:yMax,zMin:zMax]
                satisfcoord.append(list(neighborCoord[:,s_i])+[t_i])
                distance.append(np.sum(np.square(imageSample-neighborPatch)))
                #distance.append(np.correlate())

    distance = np.array(distance)
    satisfcoord = np.array(satisfcoord)
    similarK_array = np.sort(distance)[0:similarK]

    similarSample = np.zeros((similarK, sampleSizes[0],sampleSizes[1],sampleSizes[2]), dtype = 'float32')
    similarLabelSample = np.zeros((similarK, sampleSizes[0],sampleSizes[1],sampleSizes[2]), dtype = 'int16')
    similar_index = 0

    for simiDistance in  similarK_array:
        location = satisfcoord[np.where(distance == simiDistance)]
        ith_Image = location[0][3]
        ith_neigh = location[0][0:3]

        [templateImage,
        templateLabelImage] = loadSingleTransformedTemplateImage(imageIndexs[ith_Image],
                                                                 templateSubjects,
                                                                 gtTemplateLabelsImages,
                                                                 sampleSizes,
                                                                 receptiveField,
                                                                 applyPaddingBool,
                                                                 imageType
                                                                )
       
        xmin = ith_neigh[0]-halfSampleDim[0][0]
        xmax = ith_neigh[0]+halfSampleDim[0][1]+1
        ymin = ith_neigh[1]-halfSampleDim[0][0]
        ymax = ith_neigh[1]+halfSampleDim[0][1]+1
        zmin = ith_neigh[2]-halfSampleDim[0][0]
        zmax = ith_neigh[2]+halfSampleDim[0][1]+1
        similarSample[similar_index,:,:,:]=templateImage[xmin:xmax,ymin:ymax,zmin:zmax]
        similarLabelSample[similar_index,:,:,:]=templateLabelImage[xmin:xmax,ymin:ymax,zmin:zmax]
        similar_index += 1
        
    return similarSample, similarLabelSample
        

def getKSimlarPatchGPU(xcoord,
                    ycoord,
                    zcoord,
                    centralVoxelsCoordx,
                    centralVoxelsCoordy,
                    centralVoxelsCoordz,
                    imgSubject,
                    templateSubjects,
                    gtTemplateLabelsImages,
                    applyPaddingBool,
                    imageType,
                    imageIndexs,
                    sampleSizes,
                    receptiveField,
                    similarK) :

    SSD = np.zeros((len(imageIndexs), len(xcoord)), dtype = 'float32')

    imgSubject_gpu = cuda.mem_alloc(imgSubject.size * imgSubject.dtype.itemsize)
    cuda.memcpy_htod(imgSubject_gpu, imgSubject)

    xcoord = xcoord.astype(np.int32)
    ycoord = ycoord.astype(np.int32)
    zcoord = zcoord.astype(np.int32)
    xcoord_gpu = cuda.mem_alloc(xcoord.size * xcoord.dtype.itemsize)
    ycoord_gpu = cuda.mem_alloc(ycoord.size * ycoord.dtype.itemsize)
    zcoord_gpu = cuda.mem_alloc(zcoord.size * zcoord.dtype.itemsize)
    cuda.memcpy_htod(xcoord_gpu, xcoord)
    cuda.memcpy_htod(ycoord_gpu, ycoord)
    cuda.memcpy_htod(zcoord_gpu, zcoord)

    mod = SourceModule("""
        __global__ void SSDmetric(float *sumSqDiff, 
                                  float *testImage, 
                                  float *al2testImage, 
                                  int testcoordx,
                                  int testcoordy,
                                  int testcoordz,
                                  int *al2coordx,
                                  int *al2coordy,
                                  int *al2coordz,
                                  int Isizex,
                                  int Isizey,
                                  int Isizez,
                                  int radius,
                                  int coordSize)
        {
            unsigned idx = blockIdx.x*blockDim.x + threadIdx.x;
            if (idx < coordSize){
            for(int i=-radius; i<radius; i++){
                for(int j=-radius; j<radius; j++){
                    for(int k=-radius; k<radius; k++){
                        sumSqDiff[idx] += pow((testImage[testcoordx+k+(testcoordy+j)*Isizex+(testcoordz+i)*Isizex*Isizey]-
                                              al2testImage[al2coordx[idx]+k+(al2coordy[idx]+j)*Isizex+(al2coordz[idx]+i)*Isizex*Isizey]),2);
                    }
                }
            }
            sumSqDiff[idx] = sqrt(sumSqDiff[idx]);
            }
        }
    """)

    for t_i in xrange(len(imageIndexs)):

        [templateImage,
        templateLabelImage] = loadSingleTransformedTemplateImage(imageIndexs[t_i],
                                                                 templateSubjects,
                                                                 gtTemplateLabelsImages,
                                                                 sampleSizes,
                                                                 receptiveField,
                                                                 applyPaddingBool,
                                                                 imageType
                                                                ) 
        
        Isizex = np.asarray(templateImage.shape[0], dtype='int16')
        Isizey = np.asarray(templateImage.shape[1], dtype='int16')
        Isizez = np.asarray(templateImage.shape[2], dtype='int16')
        radius = np.asarray((sampleSizes[0]-1)/2, dtype='int16')
        coordSize = np.asarray(len(xcoord), dtype='int16')
        centralVoxelsCoordx = np.asarray(centralVoxelsCoordx, dtype='int16')
        centralVoxelsCoordy = np.asarray(centralVoxelsCoordy, dtype='int16')
        centralVoxelsCoordz = np.asarray(centralVoxelsCoordz, dtype='int16')
        
        SingleSSD = np.zeros((1, len(xcoord)), dtype='float32')
        SingleSSD = SingleSSD.astype(np.float32)

        SingleSSD_gpu = cuda.mem_alloc(SingleSSD.size * SingleSSD.dtype.itemsize)
        cuda.memcpy_htod(SingleSSD_gpu, SingleSSD)

        templateImage_gpu = cuda.mem_alloc(templateImage.size * templateImage.dtype.itemsize)
        cuda.memcpy_htod(templateImage_gpu, templateImage)

        
        BLOCK_SIZE = 1000;
        blockCount = (len(xcoord) + BLOCK_SIZE - 1) / BLOCK_SIZE
        

        func = mod.get_function("SSDmetric")
        func(SingleSSD_gpu, imgSubject_gpu, templateImage_gpu, centralVoxelsCoordx, centralVoxelsCoordy, centralVoxelsCoordz, 
            xcoord_gpu, ycoord_gpu, zcoord_gpu, Isizex, Isizey, Isizez, radius, coordSize, block=(BLOCK_SIZE, blockCount, 1), grid=(1,1), shared=0)
        
        cuda.memcpy_dtoh(SingleSSD, SingleSSD_gpu)
        


def getSamplingWeights(gtLabelsImage,
                       roiMask
                       ) :

    foreMask = (gtLabelsImage>0).astype(int)
    backMask = (roiMask>0) * (foreMask==0)
    weightMaps = [ foreMask, backMask ] 
 
    return weightMaps
     


def getSamplesDistribution( numSamples,
                            numImagesToSample ) :
    # We have to sample foreground and background
    # Assuming that we extract the same number of samples per category: 50% each

    samplesPercentage = np.ones( 2, dtype="float32" ) * 0.5
    samplesPerClass = np.zeros( 2, dtype="int32" )
    samplesDistribution = np.zeros( [ 2, numImagesToSample ] , dtype="int32" )
    
    samplesAssigned = 0
    
    for c_i in xrange(2) :
        samplesAssignedClass = int(numSamples*samplesPercentage[c_i])
        samplesPerClass[c_i] += samplesAssignedClass
        samplesAssigned += samplesAssignedClass
 
    # Assign the samples that were not assigned due to the rounding error of integer division. 
    nonAssignedSamples = numSamples - samplesAssigned
    classesIDx= np.random.choice(2,
                                 nonAssignedSamples,
                                 True,
                                 p=samplesPercentage)

    for c_i in classesIDx : 
        samplesPerClass[c_i] += 1
        
    for c_i in xrange(2) :
        samplesAssignedClass = samplesPerClass[c_i] / numImagesToSample                
        samplesDistribution[c_i] += samplesAssignedClass
        samplesNonAssignedClass = samplesPerClass[c_i] % numImagesToSample
        for cU_i in xrange(samplesNonAssignedClass):
            samplesDistribution[c_i, random.randint(0, numImagesToSample-1)] += 1

    return samplesDistribution

# **********************************  For testing *********************************
def sampleWholeImage(imgSubject,
                     templateSubjects,
                     gtTemplateLabelsImages,
                     tempIndexes,
                     roi,
                     sampleSize,
                     receptiveField,
                     strideVal,
                     applyPaddingBool,
                     batch_size,
                     imageType,
                     ):

    samplesCoords = []
 
    imgDims = list(imgSubject.shape)
    zMinNext=0
    zCentPredicted = False
    xminlist = []
    xmaxlist = []
    yminlist = []
    ymaxlist = []
    zminlist = []
    zmaxlist = []
    for t_i in xrange(len(tempIndexes)):
        [templateImage,
        templateLabelImage] = loadSingleTransformedTemplateImage(tempIndexes[t_i],
                                                                 templateSubjects,
                                                                 gtTemplateLabelsImages,
                                                                 sampleSize,
                                                                 receptiveField,
                                                                 applyPaddingBool,
                                                                 imageType
                                                                ) 
        coord = np.array(np.where(templateLabelImage>0))
        xminlist.append(min(coord[0,:]))
        xmaxlist.append(max(coord[0,:]))
        yminlist.append(min(coord[1,:]))
        ymaxlist.append(max(coord[1,:]))
        zminlist.append(min(coord[2,:]))
        zmaxlist.append(max(coord[2,:]))

    xmin = max(min(coord[0,:])-int((sampleSize[0])/4),0)
    xmax = min(max(coord[0,:])+int((sampleSize[0])/4),imgDims[0])
    ymin = max(min(coord[1,:])-int((sampleSize[1])/4),0)
    ymax = min(max(coord[1,:])+int((sampleSize[1])/4),imgDims[1])
    zmin = max(min(coord[2,:])-int((sampleSize[2])/4),0)
    zmax = min(max(coord[2,:])+int((sampleSize[2])/4),imgDims[2])
    
    xcoord = []
    ycoord = []
    zcoord = []
    #num_x = (xmax-xmin)/sampleSize[0]+1
    #num_y = (ymax-ymin)/sampleSize[1]+1
    #num_z = (zmax-zmin)/sampleSize[2]+1
    num_x = (xmax-xmin-sampleSize[0])/strideVal[0]+1
    num_y = (ymax-ymin-sampleSize[1])/strideVal[1]+1
    num_z = (zmax-zmin-sampleSize[2])/strideVal[2]+1
    zMinNext = zmin
    for i_z in xrange(0,num_z) :
        zMax = min(zMinNext+sampleSize[2], imgDims[2]) 
        zMin = zMax - sampleSize[2]
        zMinNext = zMinNext + strideVal[2]
        yMinNext=ymin
        yCentPredicted = False
        
        for i_y in xrange(0,num_y) :
            yMax = min(yMinNext+sampleSize[1], imgDims[1]) 
            yMin = yMax - sampleSize[1]
            yMinNext = yMinNext + strideVal[1]
            xMinNext=xmin
            xCentPredicted = False
            
            for i_x in xrange(0,num_x) :
                xMax = min(xMinNext+sampleSize[0], imgDims[0])
                xMin = xMax - sampleSize[0]
                xMinNext = xMinNext + strideVal[0]
                if isinstance(roi, (np.ndarray)) : 
                    if not np.any(roi[xMin:xMax, yMin:yMax, zMin:zMax ]) : 
                        continue
                #print([xMin, xMax-1], [yMin, yMax-1], [zMin, zMax-1])    
                samplesCoords.append([ [xMin, xMax-1], [yMin, yMax-1], [zMin, zMax-1] ])
                
    # To Theano to not complain the number of samples have to exactly fit with the number of batches.
    sampledRegions = len(samplesCoords)
    if sampledRegions%batch_size != 0:
        numberOfSamplesToAdd =  batch_size - sampledRegions%batch_size
    else:
      numberOfSamplesToAdd = 0
      
    for i in xrange(numberOfSamplesToAdd) :
        samplesCoords.append(samplesCoords[sampledRegions-1])
    
    return [samplesCoords]


"""
def sampleWholeImage(imgSubject,
                     roi,
                     sampleSize,
                     strideVal,
                     batch_size
                     ):

    samplesCoords = []
 
    imgDims = list(imgSubject.shape)
    print('imgDims:',imgDims)
    zMinNext=0
    zCentPredicted = False
    
    while not zCentPredicted :
        zMax = min(zMinNext+sampleSize[2], imgDims[2]) 
        zMin = zMax - sampleSize[2]
        zMinNext = zMinNext + strideVal[2]

        if zMax < imgDims[2]:
            zCentPredicted = False
        else:
            zCentPredicted = True 
        
        yMinNext=0
        yCentPredicted = False
        
        while not yCentPredicted :
            yMax = min(yMinNext+sampleSize[1], imgDims[1]) 
            yMin = yMax - sampleSize[1]
            yMinNext = yMinNext + strideVal[1]

            if yMax < imgDims[1]:
                yCentPredicted = False
            else:
                yCentPredicted = True
            
            xMinNext=0
            xCentPredicted = False
            
            while not xCentPredicted :
                xMax = min(xMinNext+sampleSize[0], imgDims[0])
                xMin = xMax - sampleSize[0]
                xMinNext = xMinNext + strideVal[0]

                if xMax < imgDims[0]:
                    xCentPredicted = False
                else:
                    xCentPredicted = True
                
                if isinstance(roi, (np.ndarray)) : 
                    if not np.any(roi[xMin:xMax, yMin:yMax, zMin:zMax ]) : 
                        continue
                    
                samplesCoords.append([ [xMin, xMax-1], [yMin, yMax-1], [zMin, zMax-1] ])
                
    # To Theano to not complain the number of samples have to exactly fit with the number of batches.
    sampledRegions = len(samplesCoords)
    print('samplesCoords:',max(samplesCoords))
    if sampledRegions%batch_size != 0:
        numberOfSamplesToAdd =  batch_size - sampledRegions%batch_size
    else:
      numberOfSamplesToAdd = 0
      
    for i in xrange(numberOfSamplesToAdd) :
        samplesCoords.append(samplesCoords[sampledRegions-1])
    
    return [samplesCoords]
"""

def extractSamples( imgData,
                    sliceCoords,
                    sampleSizes,
                    templateSubjects,
                    gtTemplateLabelsImages,
                    applyPaddingBool,
                    imageType,
                    tempIndexes,
                    receptiveField,
                    searchRadius,
                    similarK
                   ) :
    numberOfSamples = len(sliceCoords)
    # Create the array that will contain the samples
    samplesArrayShape = [numberOfSamples, 1, sampleSizes[0], sampleSizes[1], sampleSizes[2]]
    samples = np.zeros(samplesArrayShape, dtype= "float32")
    similarSamplesSingleImage = []
    gt_similarSamplesSingleImage = []

    for s_i in xrange(numberOfSamples) :
        cMin = []
        cMax = []
        for c_i in xrange(3):
            cMin.append(sliceCoords[s_i][c_i][0])
            cMax.append(sliceCoords[s_i][c_i][1] + 1)
            
        samples[s_i] = imgData[cMin[0]:cMax[0],
                               cMin[1]:cMax[1],
                               cMin[2]:cMax[2]]

        # Get the coordinates of neighbor samples
        xmiddle = (cMax[0]-cMin[0])/2+1
        ymiddle = (cMax[1]-cMin[1])/2+1
        zmiddle = (cMax[2]-cMin[2])/2+1

        x = np.arange(xmiddle-searchRadius,xmiddle+searchRadius+1,1)
        y = np.arange(ymiddle-searchRadius,ymiddle+searchRadius+1,1)
        z = np.arange(zmiddle-searchRadius,zmiddle+searchRadius+1,1)
        xcoord = np.tile(x, y.size*z.size)
        ycoord = np.tile(np.transpose(np.tile(y, (x.size,1))).flatten(),(z.size,1)).flatten()
        zcoord = np.transpose(np.tile(y, (x.size*y.size,1))).flatten()

        halfSampleDim = np.zeros( (len(sampleSizes), 2) , dtype='int32')

        # Get the size of half patch (i.e sample)
        for i in xrange( len(sampleSizes) ) :
            if sampleSizes[i]%2 == 0: #even
                dimensionDividedByTwo = sampleSizes[i]/2
                halfSampleDim[i] = [dimensionDividedByTwo - 1, dimensionDividedByTwo] 
            else: #odd
                dimensionDividedByTwoFloor = math.floor(sampleSizes[i]/2) 
                halfSampleDim[i] = [dimensionDividedByTwoFloor, dimensionDividedByTwoFloor] 
                
        [similarSample, 
            similarLabelSample]=getKSimlarPatchCPU(xcoord,
                                                ycoord,
                                                zcoord,
                                                samples[s_i],
                                                templateSubjects,
                                                gtTemplateLabelsImages,
                                                applyPaddingBool,
                                                imageType,
                                                tempIndexes,
                                                sampleSizes,
                                                receptiveField,
                                                halfSampleDim,
                                                similarK)

        similarSamplesSingleImage.append(similarSample)
        gt_similarSamplesSingleImage.append(similarLabelSample)
                                                                    
    return [samples, similarSamplesSingleImage, gt_similarSamplesSingleImage]

